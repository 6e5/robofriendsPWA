{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions/actions.js","actions/constants.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","length","map","robot","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","Scroll","style","overflowY","height","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","_this2","fetch","then","response","json","_this$props","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_ErrorBoundry","components_Scroll","components_CardList","connect","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initialState","store","createStore","arguments","undefined","action","objectSpread","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d1ced46b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"pa3 bg-light-green dib grow ma3 br3 tc\">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  // if (true) {\r\n  //   throw new Error(\"nooooo\");\r\n  // }\r\n  if (robots.length === 0) {\r\n    return <h1>Loading..</h1>;\r\n  }\r\n  return (\r\n    <div>\r\n      {robots.map(robot => {\r\n        const { name, id, email } = robot;\r\n        return <Card key={id} name={name} id={id} email={email} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"f4 pa3 b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops Something Went Wrong...</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div style={{ overflowY: \"scroll\", height: \"700px\" }} className=\"scrollbar\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextProps.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>RoboFriends</h1>\r\n        <CounterButton color={\"red\"} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport { setSearchField } from \"../actions/actions\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchField\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      robots: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(robots => {\r\n        this.setState({ robots });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { robots } = this.state;\r\n    const { searchField, onSearchChange } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <ErrorBoundry>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </ErrorBoundry>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\r\n\r\nexport const setSearchField = text => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  };\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nimport { searchRobots } from \"./reducers/reducers.js\";\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}